




// Friends feature
/**
 * Each Friendship is related to two users. Friendships are setup by backend
 * code when FriendRequests are accepted.
 */
entity Friendship {
    createdAt Instant required  // DANGER: from is a reserved keyword in SQL
}
/**
 * Each user can send a friend request, which is related to the user
 * initiating it, and who it is for.
 */
entity FriendRequest {
    createdAt Instant required
}
/**
 * The system creates friend recommendations based on how similar two
 * AppUsers' listening statistics are. The timestamp allows them to be
 * recalculated when statistics are recalculated.
 */
entity FriendRecommendation {
    similarity Float min(0.0) max(1.0) required
    createdAt LocalDate required
}

relationship OneToOne {
    /** Each FriendRecommendation relates to the AppUser recommended. */
    FriendRecommendation{aboutAppUser required} to AppUser{aboutFriendRecommendation}

    /** Each FriendRequest is associated with a particular user, who initiated it. */
    FriendRequest{initiatingAppUser required} to AppUser{intitiatingFriendRequest}

    /** Friendships relate to two AppUsers: initiating, and accepting users */
    Friendship{friendInitiating required} to AppUser{friendshipInitiated}
    /** Friendships relate to two AppUsers: initiating, and accepting users */
    Friendship{friendAccepting  required} to AppUser{friendshipAccepted}
}
relationship OneToMany {
    AppUser{friend} to Friendship
    AppUser{toFriendRequest} to FriendRequest{toAppUser}
    AppUser{forFriendRecommendation} to FriendRecommendation{forAppUser}
    /** Blocked users are related to the user who blocked them. */
    AppUser{blockedUser} to AppUser{blockedByUser}
}





// Personal Insights
entity Stream {
    playedAt Instant required
}
entity Song {
    spotifyID String required unique
    name String required
    imageURL String
    releaseDate Instant
    duration Duration required
    // audio features
    acousticness Float min(0.0) max(1.0)
    danceability Float min(0.0) max(1.0)
    energy Float min(0.0) max(1.0)
    instrumentalness Float min(0.0) max(1.0)
    musicalKey Integer  // DANGER: key is a reserved keyword in sql (obviously)
    liveness Float min(0.0) max(1.0)
    loudness Float min(0.0) max(1.0)
    mode Boolean
    speechiness Float min(0.0) max(1.0)
    tempo Float
    timeSignature Integer
    valence Float min(0.0) max(1.0)
}
entity Artist {
    spotifyID String required unique
    name String required
    imageURL String
}
entity Album {
    spotifyID String required unique
    name String required
    imageURL String
    releaseDate Instant
    albumType AlbumType
}
enum AlbumType {
    ALBUM,
    SINGLE,
    COMPILATION
}
entity Genre {
    name String
}
entity Playlist {
    spotifyID String required unique
    name String required
    imageURL String
}
entity PlaylistStats {
    playlistLength Integer
    lastUpdated Instant
}
// AllAccountStats doesn't seem relevant enough to include here.
// The stats involved can be derived from SQL statements instead.

relationship OneToOne {
    Playlist{playlistStats required} to PlaylistStats{playlist required}
}
relationship OneToMany {
    AppUser{playlist} to Playlist{appUser}
    AppUser{stream} to Stream{appUser}  // Each user will listen to many songs.
}
relationship ManyToOne {
    Stream{song required} to Song{stream}  // Each stream is required to have one song.
    Song{album} to Album

    PlaylistStats{happiestSong}   to Song{happiestPlaylistStats}
    PlaylistStats{fastestSong}    to Song{fastestPlaylistStats}
    PlaylistStats{sumsUpSong}     to Song{sumsUpPlaylistStats}
    PlaylistStats{anonmalousSong} to Song{anomalousPlaylistStats}
}
relationship ManyToMany {
    Playlist{song} to Song{playlist}
    Artist{song} to Song{artist}
    Artist{album} to Album{artist}
    Artist{genre} to Genre{artist}
}





// Profile Feature
/** Profile information about a user, identifying them. */
entity AppUser {
    spotifyID String required
    name String required
    avatarURL String
    bio TextBlob
    spotifyUsername String required
}
entity UserPreferences {
    visibility VisibilityPreference
    isDarkMode Boolean
    isHighContrast Boolean
    playlistPrivacy VisibilityPreference
}

entity SpotifyToken {
    accessToken String required
    tokenType String required
    userScope String required  // DANGER: scope is a reserved keyword in SQL
    expires Instant required  // Calculated from expiresIn given by API request
    refreshToken String required
}

relationship OneToOne {
    AppUser{internalUser required} to User
    AppUser{userPreferences required} to UserPreferences{appUser required}
    AppUser{spotifyToken required} to SpotifyToken{appUser required}
}





// Home Feed feature

/**
 * Contains each user's cards (updates from yours and your friend's listening habits as well as general updates).
 * These will be accessed when generating user feeds. Each row is a Card, respective to the user on which it's based.
 */
entity Card {
    metric CardType required
    timeFrame Duration
    metricValue Integer required // DANGER: value is a reserved keyword in SQL
    timeGenerated Instant required
}

/**
 * Contains each user's feed, which is comprised of cards from different users.
 * Each row is a feed, respective to the user who will see it.
 */
entity Feed {
    lastUpdated Instant required
}

/**
 * Contains each feed's cards.
 * Each row is a card, respective to the user who will see the feed that the card belongs to.
 */
entity FeedCard {
    liked Boolean required
}

/**Stores each user's changes to their sharing preferences.*/
entity SharingPreference {
    metric CardType
    visibility VisibilityPreference
}

/**Represents the different levels of privacy that a user can retain on a given value.*/
enum VisibilityPreference {
    GLOBAL,
    FRIENDS_OF_FRIENDS,
    FRIENDS,
    PRIVATE
}

/**Represents the different types of data that can be analysed and shared with others*/
enum CardType {
    // (These are examples and need to be agreed on as we develop the app)
    LISTENING_DURATION,
    GENRE,
    NO_OF_FRIENDS,
    NO_OF_SONGS_LISTENED,
    TOP_ARTIST,
    TOP_SONG,

    // Specifically for notification cards - will always be private
    FRIEND_REQUEST
}

relationship OneToOne {
    AppUser{feed required} to Feed{appUser required}
}
relationship OneToMany {
    AppUser{card} to Card{appUser required}
    Feed{card} to FeedCard{feed required}
    Card{usage} to FeedCard{card required}
    UserPreferences{sharingPreference} to SharingPreference{appUser required}
}



// Share Stats
entity CardTemplate {
    color Color
    layout Layout
    name String
    font Font
}
entity CardMetric {
    metric CardType required
}
enum Color {
    OPTION1
}
enum Layout {
    OPTION1
}
enum Font {
    OPTION1
}

relationship OneToMany {
    AppUser{cardTemplate} to CardTemplate{appUser required}
    CardTemplate{metric} to CardMetric{cardTemplate required}
}




