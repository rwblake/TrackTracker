// The following entities and relationships facilitate the friends page,
// but are not directly part of the feature. They are included in a
// simplified form for reference.
/** Profile information about a user, identifying them. */
entity AppUser
/** Streams are date-stamped instances of songs being played by a user. */
entity Stream
/** Songs contain the Spotify API data relating to the track. */
entity Song

relationship OneToMany {
    AppUser{stream} to Stream{appUser}
}
relationship OneToOne {
    Stream{song required} to Song{stream}
}


// The following entities and relationships directly relate to the friends
// feature.
/**
 * Each Friendship is related to two users. Friendships are setup by backend
 * code when FriendRequests are accepted.
 */
entity Friendship {
    fromDate LocalDate required
}
/**
 * Each user can send a friend request, which is related to the user
 * initiating it, and who it is for.
 */
entity FriendRequest {
    date LocalDate required
}
/**
 * The system creates friend recommendations based on how similar two
 * AppUsers' listening statistics are. The timestamp allows them to be
 * recalculated when statistics are recalculated.
 */
entity FriendRecommendation {
    similarity Float min(0.0) max(1.0) required
    lastUpdated LocalDate required
}

relationship OneToOne {
    /** Each FriendRecommendation relates to the AppUser recommended. */
    FriendRecommendation{aboutAppUser required} to AppUser{aboutFriendRecommendation}

    /** Each FriendRequest is associated with a particular user, who initiated it. */
    FriendRequest{initiatingAppUser requied} to AppUser{intitiatingFriendRequest}

    /** Friendships relate to two AppUsers: initiating, and accepting users */
    Friendship{friendInitiating required} to AppUser{friendshipInitiated}
    /** Friendships relate to two AppUsers: initiating, and accepting users */
    Friendship{friendAccepting  required} to AppUser{friendshipAccepted}
}
relationship OneToMany {
    AppUser{friend} to Friendship
    AppUser{toFriendRequest} to FriendRequest{toAppUser}
    AppUser{forFriendRecommendation} to FriendRecommendation{forAppUser}
    /** Blocked users are related to the user who blocked them. */
    AppUser{blockedUser} to AppUser{blockedByUser}
}

